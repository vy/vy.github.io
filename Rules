#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

preprocess do
  # Remove private items.
  @items.reject! { |item|
    /%private.[A-Za-z0-9]+$/.match(item.identifier.chop + "." + item[:extension])
  }

  # Generate tags.
  tags = @items
    .map { |item| item[:tags] }
    .flatten.uniq.delete_if { |tag| tag.nil? }
  tags.each { |tag|
    rawcontent = "<%= render('blog', :tag => '#{tag}') %>"
    attributes = { :title => "Blog/#{tag}" }
    identifier = tag_identifier(tag)
    @items << Nanoc::Item.new(rawcontent, attributes, identifier, :binary => false)
  }
end

compile %r{^/(js|css)} do
  filter :sass if item[:extension] == "sass"
end

compile %r{^/blog/post} do
  unless item.binary?
    filter :erb
    filter :kramdown
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
    layout "post"
  end
end

compile %r{^/blog/tag} do
  unless item.binary?
    filter :erb
  end
end

compile %r{^/blog/$} do
  unless item.binary?
    filter :erb
    filter :kramdown
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
    layout "blog"
  end
end

compile "/blog/feed/" do
  filter :erb
end

compile "*" do
  unless item.binary?
    filter :erb
    filter :kramdown if item[:extension] == "md"
    layout "default"
  end
end

route %r{^/(js|css)} do
  ext = item[:extension]
  ext = "css" if item[:extension] == "sass"
  item.identifier.chop + "." + ext
end

route %r{^/blog/post} do
  y,m,d,t = /([0-9]{4})([0-9]{2})([0-9]{2})-([^\/]+)/
    .match(item.identifier).captures
  if item.binary?
    dir,bin = /([^#]+)+#(.+)/.match("#{t}.#{item[:extension]}").captures
    "/blog/post/#{y}/#{m}/#{d}/#{dir}/#{bin}"
  else
    "/blog/post/#{y}/#{m}/#{d}/#{t}/index.html"
  end
end

route "*" do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + "." + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + "index.html"
  end
end

layout "*", :erb
